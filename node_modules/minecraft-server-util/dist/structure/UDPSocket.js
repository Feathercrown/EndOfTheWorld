"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dgram_1 = __importDefault(require("dgram"));
const Packet_1 = __importDefault(require("./Packet"));
/**
 * A UDP socket class for reading and writing data to a remote socket.
 * @class
 */
class UDPSocket {
    /**
     * Creates a new UDP socket class from the host and port.
     * @param {string} host The host of the server
     * @param {port} port The port of the server
     * @constructor
     */
    constructor(host, port) {
        this.host = host;
        this.port = port;
        this.socket = dgram_1.default.createSocket('udp4');
        this.buffer = [];
        this.socket.on('message', (message, info) => {
            this.buffer.push({ info, message });
        });
    }
    /**
     * Reads a packet from the UDP socket.
     * @returns {Promise<Packet>} The packet read from the socket
     * @async
     */
    readPacket() {
        var _a, _b;
        if (this.buffer.length > 0) {
            const packet = new Packet_1.default();
            packet.data = [...((_b = (_a = this.buffer.shift()) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : [])];
            return Promise.resolve(packet);
        }
        return new Promise((resolve) => {
            let read = false;
            const messageHandler = () => {
                if (read) {
                    return;
                }
                process.nextTick(() => {
                    var _a, _b;
                    if (this.buffer.length > 0) {
                        read = true;
                        this.socket.removeListener('message', messageHandler);
                        const packet = new Packet_1.default();
                        packet.data = [...((_b = (_a = this.buffer.shift()) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : [])];
                        resolve(packet);
                    }
                });
            };
            this.socket.on('message', messageHandler);
        });
    }
    /**
     * Writes a packet to the UDP connection.
     * @param {Packet} packet The packet to write to the connection
     * @returns {Promise<void>} A Promise that resolves when it has written the packet
     * @async
     */
    writePacket(packet) {
        return new Promise((resolve, reject) => {
            this.socket.send(Buffer.from(packet.data), this.port, this.host, (error) => {
                if (error) {
                    return reject(error);
                }
                resolve();
            });
        });
    }
    /**
     * Closes the connection and cleans up data.
     * @returns {Promise<void>} A Promise that resolves when the client has closed
     * @async
     */
    destroy() {
        return new Promise((resolve) => {
            this.socket.removeAllListeners();
            this.socket.close(() => {
                resolve();
            });
        });
    }
}
exports.default = UDPSocket;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVURQU29ja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0cnVjdHVyZS9VRFBTb2NrZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrREFBMEI7QUFDMUIsc0RBQThCO0FBRTlCOzs7R0FHRztBQUNILE1BQU0sU0FBUztJQVNkOzs7OztPQUtHO0lBQ0gsWUFBWSxJQUFZLEVBQUUsSUFBWTtRQUNyQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsTUFBTSxHQUFHLGVBQUssQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFFakIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFO1lBQzNDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILFVBQVU7O1FBQ1QsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDM0IsTUFBTSxNQUFNLEdBQUcsSUFBSSxnQkFBTSxFQUFFLENBQUM7WUFDNUIsTUFBTSxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsYUFBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSwwQ0FBRSxPQUFPLG1DQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFeEQsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQy9CO1FBRUQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzlCLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQztZQUVqQixNQUFNLGNBQWMsR0FBRyxHQUFHLEVBQUU7Z0JBQzNCLElBQUksSUFBSSxFQUFFO29CQUFFLE9BQU87aUJBQUU7Z0JBRXJCLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFOztvQkFDckIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7d0JBQzNCLElBQUksR0FBRyxJQUFJLENBQUM7d0JBRVosSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxDQUFDO3dCQUV0RCxNQUFNLE1BQU0sR0FBRyxJQUFJLGdCQUFNLEVBQUUsQ0FBQzt3QkFDNUIsTUFBTSxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsYUFBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSwwQ0FBRSxPQUFPLG1DQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7d0JBRXhELE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztxQkFDaEI7Z0JBQ0YsQ0FBQyxDQUFDLENBQUM7WUFDSixDQUFDLENBQUM7WUFFRixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxXQUFXLENBQUMsTUFBYztRQUN6QixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3RDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUMxRSxJQUFJLEtBQUssRUFBRTtvQkFDVixPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDckI7Z0JBRUQsT0FBTyxFQUFFLENBQUM7WUFDWCxDQUFDLENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxPQUFPO1FBQ04sT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztZQUNqQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUU7Z0JBQ3RCLE9BQU8sRUFBRSxDQUFDO1lBQ1gsQ0FBQyxDQUFDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7Q0FDRDtBQUVELGtCQUFlLFNBQVMsQ0FBQyJ9